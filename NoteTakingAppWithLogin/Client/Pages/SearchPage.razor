@page "/search"
@using NoteTakingAppWithLogin.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>NOTEPAD+++</PageTitle>



@if (notes.Count <= 0)
{
    <p>LOADING........</p>
}
else
{
    if (searchState == "TITLE"){
        <div class="search">
            <InputText class="searchTerm" @bind-Value="searchQuery" placeholder="SEARCH BY TITLE"></InputText>
            <button class="btn-primary" @onclick="searchNotesByTitle"><i class="oi oi-magnifying-glass"></i></button>
            <button class="btn-primary" @onclick="changeSearchState">TITLE</button>
        </div>
    }
    else if (searchState == "CONTENT"){
        <div class="search">
            <InputText class="searchTerm" @bind-Value="searchQuery" placeholder="SEARCH BY CONTENT"></InputText>
            <button class="btn-primary" @onclick="searchNotesByContent"><i class="oi oi-magnifying-glass"></i></button>
            <button class="btn-primary" @onclick="changeSearchState">CONTENT</button>
        </div>
    }

    <div class="note-container p-3">

        @foreach (var note in filteredNotes)
        {
            <div>
                <div class="note-summary">
                    @* <div class="p-3">@game.Id</div> *@
                    <div id="top-note-summary">
                        <b @onclick="(() => EditNote(note.Id))" class="p-3">@note.Title</b>
                        @if (note.Favourite == "Yes")
                        {
                            <div class="p-3" @onclick="(() => unfavourite(note))"> <i class="oi oi-star" style="color:gold;"></i></div>
                        }
                        else
                        {
                            <div class="p-3" @onclick="(() => favourite(note))"> <i class="oi oi-star" style="color:black;"></i> </div>
                        }
                    </div>
                    <div id="middle-note-summary" @onclick="(() => EditNote(note.Id))" class="p-3">
                        @note.Content
                    </div>
                    <div id="bottom-note-summary" @onclick="(() => EditNote(note.Id))">
                        <div class="p-3">@note.Tag</div>
                        @if (note.LatestDate.ToString("MM/dd/yyyy") == "01/01/0001")
                        {
                            <div class="p-3">@note.ReleaseDate.ToString("MM/dd/yyyy")</div>
                        }
                        else
                        {
                            <div class="p-3">@note.LatestDate.ToString("MM/dd/yyyy")</div>
                        }

                    </div>

                </div>
            </div>

        }
    </div>
}
@code {
    List<UserNote> notes = new List<UserNote>();

    protected override async Task OnInitializedAsync()
    {

        var result = await Http.GetFromJsonAsync<List<UserNote>>("api/usernote");
        notes = result;
        searchState = "TITLE";
    }


    void AddNote()
    {
        NavigationManager.NavigateTo("/note");
    }

    void EditNote(int Id)
    {
        NavigationManager.NavigateTo($"/note/{Id}");
    }

    async Task favourite(UserNote note)
    {
        note.Favourite = "Yes";
        Console.WriteLine("TEH NOTE ID IS : " + note.Id);
        await Http.PutAsJsonAsync($"api/usernote/{note.Id}", note);
    }

    async Task unfavourite(UserNote note)
    {
        note.Favourite = string.Empty;
        Console.WriteLine("TEH NOTE ID IS : " + note.Id);
        await Http.PutAsJsonAsync($"api/usernote/{note.Id}", note);
    }

    string searchQuery = "";
    List<UserNote> filteredNotes = new List<UserNote>();

    string searchState = "";

    void searchNotesByTitle()
    {
        filteredNotes = notes.Where(note => note.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    void searchNotesByContent()
    {
        filteredNotes = notes.Where(note => note.Content.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    async Task changeSearchState()
    {
        if (searchState == "TITLE"){
            searchState = "CONTENT";
            searchQuery = "";
            StateHasChanged();
        }else if (searchState == "CONTENT")
        {
            searchState = "TITLE";
            StateHasChanged();
            searchQuery = "";
        }
    }

}

