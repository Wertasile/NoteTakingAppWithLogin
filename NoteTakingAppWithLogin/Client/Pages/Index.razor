@page "/"
@using NoteTakingAppWithLogin.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>NOTEPAD+++</PageTitle>

@if (loggedinstate == "YES"){
    
}else{
    <h2>PLEASE LOG IN</h2>
}

@if (notes.Count <= 0){
    <p>LOADING........</p>
}
else{
    <div>
        @if (filterstate == "Oldest First"){
            <button class="btn-primary" @onclick="orderbydescendingreleasedate">Filter: @filterstate</button>
        }
        else if (filterstate == "Newest First"){
            <button class="btn-primary" @onclick="orderbyfavourite">Filter: @filterstate</button>
        }
        else if (filterstate == "Favourites First"){
            <button class="btn-primary" @onclick="orderbyascendingreleasedate">Filter: @filterstate</button>
        }
        
    </div>
    <div class="note-container p-3">
        @foreach (var note in notes){
            <div>
                <div class="note-summary">
                    @* <div class="p-3">@game.Id</div> *@
                    <div id="top-note-summary">
                        <b @onclick="(() => EditNote(note.Id))" class="p-3">@note.Title</b>
                        @if (note.Favourite == "Yes")
                        {
                            <div class="p-3" @onclick="(() => unfavourite(note))"> <i class="oi oi-star" style="color:gold;"></i></div>
                        }
                        else
                        {
                            <div class="p-3" @onclick="(() => favourite(note))"> <i class="oi oi-star" style="color:black;"></i> </div>
                        }
                    </div>
                    <div id="middle-note-summary" @onclick="(() => EditNote(note.Id))" class="p-3">
                        @note.Content
                    </div>
                    <div id="bottom-note-summary" @onclick="(() => EditNote(note.Id))">
                        <div class="p-3">@note.Tag</div>
                        @if (note.LatestDate.ToString("MM/dd/yyyy") == "01/01/0001")
                        {
                            <div class="p-3">@note.ReleaseDate.ToString("MM/dd/yyyy")</div>
                        }
                        else
                        {
                            <div class="p-3">@note.LatestDate.ToString("MM/dd/yyyy")</div>
                        }  
                    </div>
                </div>
            </div>
        }
    </div>
}
@code{
    List<UserNote> notes = new List<UserNote>();
    string loggedinstate = "NO";
    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.Identity;
        if (user != null && user.IsAuthenticated)
        {
            var result = await Http.GetFromJsonAsync<List<UserNote>>("api/usernote");
            notes = result.OrderByDescending(o => o.Favourite).ToList();
            loggedinstate = "YES";
            filterstate = "Favourites First";
            Console.WriteLine("USER REPLY: " + user);
        }

    }

    void AddNote()
    {
        NavigationManager.NavigateTo("/note");
    }

    void EditNote(int Id)
    {
        NavigationManager.NavigateTo($"/note/{Id}");
    }

    async Task favourite(UserNote note)
    {
        note.Favourite = "Yes";
        Console.WriteLine("TEH NOTE ID IS : " + note.Id);
        await Http.PutAsJsonAsync($"api/usernote/{note.Id}", note);
    }

    async Task unfavourite(UserNote note)
    {
        note.Favourite = string.Empty;
        Console.WriteLine("TEH NOTE ID IS : " + note.Id);
        await Http.PutAsJsonAsync($"api/usernote/{note.Id}", note);
    }

    string filterstate = "";

    async Task orderbyascendingreleasedate()
    {
        filterstate = "Oldest First";
        await Task.Run(() =>
        {
            notes = notes.OrderBy(o => o.LatestDate).ToList();
            StateHasChanged();
        });
    }

    async Task orderbydescendingreleasedate()
    {
        filterstate = "Newest First";
        await Task.Run(() =>
        {
            notes = notes.OrderByDescending(o => o.LatestDate).ToList();
            StateHasChanged();
        });
    }

    async Task orderbyfavourite()
    {
        filterstate = "Favourites First";
        await Task.Run(() =>
        {
            notes = notes.OrderByDescending(o => o.Favourite).ToList();
            StateHasChanged();
        });
    }

}
