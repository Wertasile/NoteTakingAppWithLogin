@page "/note"
@page "/note/{id:int}"
@using NoteTakingAppWithLogin.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Toolbelt.Blazor.SpeechSynthesis
@inject SpeechSynthesis SpeechSynthesis

@if (Id is null)
{
    <PageTitle>ADD NEW NOTE</PageTitle>
    <h3>ADD NEW NOTE</h3>
}
else
{
    <PageTitle>EDIT NOTE</PageTitle>
    <h3>EDIT NOTE</h3>
}
<div id="editpage">


    <div class="side-btn-container">
            <button type="button" class="btn btn-outline-light"><i class="oi oi-caret-left"></i></button>
    </div>

    <div>
            <EditForm Model="@note" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div id="editnote-header">


                    <div class="text-row">
                        <div style="width:90%;">
                            <InputText class="textbox-customisation" @bind-Value="note.Title" placeholder="Enter Title.."></InputText>
                        </div>
                        <div>
                            <button type="button" class="btn btn-outline-primary" @onclick="ReadTitle">
                                <i class="oi oi-volume-high"></i>
                            </button>
                        </div>

                    </div>

                    <div class="text-row">
                        <div style="width:90%;">
                            <InputSelect class="textbox-customisation" @bind-Value="note.Tag" placeholder="Select Tag..">
                                <option value="">SELECT TAG</option> @*DEFAULT VALUE*@
                                <option value="Education">Education</option>
                                <option value="Sports">Sports</option>
                                <option value="Personal">Personal</option>
                                <option value="Family">Family</option>
                            </InputSelect>
                        </div>
                        <div>
                            <button type="button" class="btn btn-outline-primary" @onclick="ReadTag">
                                <i class="oi oi-volume-high"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <div id="editnote-middle">
                    <div class="text-row">
                        <div style="width:90%;">
                            <InputTextArea @bind-Value="note.Content" class="textbox-customisation" placeholder="Enter note content....."></InputTextArea>
                        </div>
                        <div>
                            <button type="button" class="btn btn-outline-primary" @onclick="ReadContent">
                                <i class="oi oi-volume-high"></i>
                            </button>
                        </div>

                    </div>

                </div>

                <div id="editnote-bottom">
                    <button type="submit" class="btn btn-primary"><i class="oi oi-bookmark"></i></button>
                    @if (Id is not null)
                    {
                        <button type="button" class="btn btn-outline-danger" @onclick="DeleteNote"><i class="oi oi-delete"></i></button>
                    }
                    
                </div>


            </EditForm>
    </div>


    <div class="side-btn-container">
        <button type="button" class="btn btn-outline-light"><i class="oi oi-caret-right"></i></button>
    </div>
    
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    UserNote note = new UserNote { Title = string.Empty, Content = string.Empty, Tag = string.Empty };

    

    // LIFECYCLE METHOD TO GET THE VIDEOGAME (WE REQUIRE THIS WHEN WE WANT TO EDIT AN EXISTING NOTE) . IT IS THE SAME LOGIC/ REASONING AS ONINITIALISEDASYNC ON HOME PAGE, CUZ EDIT PAGE INITIALISES WITH PARAMETERS
    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await Http.GetFromJsonAsync<UserNote>($"api/usernote/{Id}");
            if (result is not null)
            {
                note = result;
            }
        }
    }

    async Task HandleSubmit()
    {
        if (Id is null)
        {
            await Http.PostAsJsonAsync("api/usernote", note);

        }
        else
        {
            await Http.PutAsJsonAsync($"api/usernote/{Id}", note);

        }
        NavigationManager.NavigateTo("/");
    }

    async Task DeleteNote()
    {
        await Http.DeleteAsync($"api/usernote/{Id}");
        NavigationManager.NavigateTo("/");
    }

    public void GoHome()
    {
        NavigationManager.NavigateTo("/");
    }

    public void ReadTitle()
    {
        this.SpeechSynthesis.Speak(this.note.Title);
    }

    public void ReadTag()
    {
        this.SpeechSynthesis.Speak(this.note.Tag);
    }

    public void ReadContent()
    {
        this.SpeechSynthesis.Speak(this.note.Content);
    }
}
