@page "/note"
@page "/note/{id:int}"
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using NoteTakingAppWithLogin.Shared
@using System.Runtime.InteropServices
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using Toolbelt.Blazor.SpeechSynthesis
@inject SpeechSynthesis SpeechSynthesis

@if (Id is null)
{
    <PageTitle>ADD NEW NOTE</PageTitle>
    <h3>ADD NEW NOTE</h3>
}
else
{
    <PageTitle>EDIT NOTE</PageTitle>
    <h3>EDIT NOTE</h3>
}
<div>

    @*
    <div class="side-btn-container">
            <button type="button" class="btn btn-outline-light"><i class="oi oi-caret-left"></i></button>
    </div>
    *@
    <div>
            <EditForm Model="@note" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div id="editnote-header">


                    <div class="text-row">
                        <div style="width:90%;">
                            <InputText class="textbox-customisation" @bind-Value="note.Title" placeholder="Enter Title.."></InputText>
                        </div>
                        <div>
                            <button type="button" class="btn btn-outline-primary" @onclick="ReadTitle">
                                <i class="oi oi-volume-high"></i>
                            </button>
                        </div>

                    </div>

                    <div class="text-row">
                        <div style="width:90%;">
                            <InputSelect class="textbox-customisation" @bind-Value="note.Tag" placeholder="Select Tag..">
                            @foreach (var tag in tags)
                            {
                                <option value="@tag.TagName">@tag.TagName</option>
                            }
                            </InputSelect>
                        </div>
                        <div>
                            <button type="button" class="btn btn-outline-primary" @onclick="ReadTag">
                                <i class="oi oi-volume-high"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <div id="editnote-middle">
                    <div class="text-row">
                        <div style="width:90%;">
                            <InputTextArea @bind-Value="note.Content" class="textbox-customisation" placeholder="Enter note content....."></InputTextArea>
                        </div>
                        <div>
                            <button type="button" class="btn btn-outline-primary" @onclick="ReadContent">
                                <i class="oi oi-volume-high"></i>
                            </button>
                        </div>

                    </div>

                </div>

                <div id="editnote-bottom">
                    <button type="submit" class="btn btn-primary"><i class="oi oi-bookmark"></i></button>
                    @if (Id is not null)
                    {
                        <button type="button" class="btn btn-danger" @onclick="DeleteNote"><i class="oi oi-delete"></i></button>
                    }
                
                </div>

            <details>
                <summary>More options</summary>
                <div>
                    @*VOICE SELECTION*@
                    @if (Voices.Any())
                    {
                        <p>
                            
                            <select class="textbox-customisation" @onchange="OnChangeVoice" style="max-width:100%;">
                                <option value="@(default(string))">(unset): Select Voice </option>
                                @foreach (var voice in Voices.OrderBy(v => v.Lang).ThenBy(v => v.VoiceURI))
                                {
                                    <option @key="voice.VoiceIdentity" value="@voice.VoiceIdentity" selected="@(voice.VoiceIdentity == this.VoiceId)">@voice.Name (@voice.Lang)</option>
                                }
                            </select>
                        </p>
                    }

                    

                    <section>
                        <h2>Voice options</h2>
                        <div style="display:flex; justify-content:space-between; flex-wrap:wrap;">
                            <div><input type="text" class="textbox-customisation" @bind="Lang" placeholder="Select Language"/></div>
                            <div>Picth: @Pitch.ToString("0.0") <input type="range" min="0.0" max="2.0" step="0.1" @bind="Pitch" /> <button class="btn-primary" @onclick="(() => this.Pitch = 1.0)">reset</button></div>
                            <div>Rate: @Rate.ToString("0.0") <input type="range" min="0.1" max="10.0" step="0.1" @bind="Rate" /> <button class="btn-primary" @onclick="(() => this.Rate = 1.0)">reset</button></div>
                            <div>Volume: @Volume.ToString("0.0") <input type="range" min="0.0" max="1.0" step="0.1" @bind="Volume" /> <button class="btn-primary" @onclick="(() => this.Volume = 1.0)">reset</button></div>
                        </div>
                    </section>

                </div>
            </details>


            </EditForm>
    </div>

    @*
    <div class="side-btn-container">
        <button type="button" class="btn btn-outline-light"><i class="oi oi-caret-right"></i></button>
    </div>
    *@
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    UserNote note = new UserNote { Title = string.Empty, Content = string.Empty, Tag = string.Empty };

    // TAGS FOR POPULATING INPUT SELECT
    List<Tag> tags = new List<Tag>();

    protected override async Task OnInitializedAsync()
    {
        var resulttag = await Http.GetFromJsonAsync<List<Tag>>("api/tag");
        if (resulttag != null)
        {
            tags = resulttag;
        }
    }

    // LIFECYCLE METHOD TO GET THE VIDEOGAME (WE REQUIRE THIS WHEN WE WANT TO EDIT AN EXISTING NOTE) . IT IS THE SAME LOGIC/ REASONING AS ONINITIALISEDASYNC ON HOME PAGE, CUZ EDIT PAGE INITIALISES WITH PARAMETERS
    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            var result = await Http.GetFromJsonAsync<UserNote>($"api/usernote/{Id}");
            if (result is not null)
            {
                note = result;
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.Voices = await this.SpeechSynthesis.GetVoicesAsync();
            this.StateHasChanged();

            this.Voices = await this.SpeechSynthesis.GetVoicesAsync();
            this.StateHasChanged();
        }
    }

    async Task HandleSubmit()
    {
        if (Id is null)
        {
            await Http.PostAsJsonAsync("api/usernote", note);

        }
        else
        {
            await Http.PutAsJsonAsync($"api/usernote/{Id}", note);

        }
        NavigationManager.NavigateTo("/");
    }

    async Task DeleteNote()
    {
        await Http.DeleteAsync($"api/usernote/{Id}");
        NavigationManager.NavigateTo("/");
    }

    public void GoHome()
    {
        NavigationManager.NavigateTo("/");
    }

    public void ReadContent()
    {
        var utterancet = new SpeechSynthesisUtterance
            {
                Text = this.note.Content,
                Lang = "en-US", // BCP 47 language tag
                Pitch = this.Pitch, // 0.0 ~ 2.0 (Default 1.0)
                Rate = this.Rate, // 0.1 ~ 10.0 (Default 1.0)
                Volume = this.Volume // 0.0 ~ 1.0 (Default 1.0)
                
            };
            utterancet.Voice = this.GetVoice();
        this.SpeechSynthesis.Speak(utterancet); // 👈 Speak!
    }

    public void ReadTitle()
    {
        var utterancet = new SpeechSynthesisUtterance
            {
                Text = this.note.Title,
                Lang = "en-US", // BCP 47 language tag
                Pitch = this.Pitch, // 0.0 ~ 2.0 (Default 1.0)
                Rate = this.Rate, // 0.1 ~ 10.0 (Default 1.0)
                Volume = this.Volume // 0.0 ~ 1.0 (Default 1.0)
            };
        utterancet.Voice = this.GetVoice();
        this.SpeechSynthesis.Speak(utterancet); // 👈 Speak!
    }

    public void ReadTag()
    {
        var utterancet = new SpeechSynthesisUtterance
            {
                Text = this.note.Tag,
                Lang = "en-US", // BCP 47 language tag
                Pitch = this.Pitch, // 0.0 ~ 2.0 (Default 1.0)
                Rate = this.Rate, // 0.1 ~ 10.0 (Default 1.0)
                Volume = this.Volume // 0.0 ~ 1.0 (Default 1.0)
                //Voice = this.Voices.FirstOrDefault(v => v.Name.Contains("Haruka"));
            };
        utterancet.Voice = this.GetVoice();
        this.SpeechSynthesis.Speak(utterancet); // 👈 Speak!
    }


    bool isExpanded;
    void ExpandSpeechSetting()
    {
        isExpanded = true;
    }

    void CollapseSpeechSetting()
    {
        isExpanded = false;
    }

    [SupplyParameterFromQuery, Parameter]
    public string? Text { get; set; }

    [SupplyParameterFromQuery, Parameter]
    public string? VoiceId { get; set; }

    [SupplyParameterFromQuery, Parameter]
    public string? Lang { get; set; }

    private double Pitch = 1.0;

    private double Rate = 1.0;

    private double Volume = 1.0;

    private IEnumerable<SpeechSynthesisVoice> Voices = Enumerable.Empty<SpeechSynthesisVoice>();


    private bool Available;

    
    private SpeechSynthesisVoice? GetVoice()
    {
        return this.Voices.FirstOrDefault(v => v.VoiceIdentity == this.VoiceId);
    }

    void OnChangeVoice(ChangeEventArgs args)
    {
        this.VoiceId = args.Value?.ToString();
        this.Lang = this.GetVoice()?.Lang ?? "";
       
    }
    

    

    
}

